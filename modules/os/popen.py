"""
subprocess模块:
    泛化创建进程的任务, 控制输入和输出流, 以及处理返回代码
"""

"""
Popen(args, **argv) 以子进程形式执行一个新命令, 然后返回代表新进程的Popen对象. 命令在args中指定,是字符串('ls -l')
    或字符串列表(['ls', '-l']). argv表示关键字参数的集合,设置这些参数可控制子进程的各种属性.
    bufsize 指定缓存行为,0代表无缓存, 1表示缓存, 负值表示使用系统的默认行为, 其他正数值代表指定近似的缓存大小;
    close_fds 如果是True,在子进程执行之前将关闭除0,1,2之外所有文件描述符. 默认值False;
    cwd 将在其中执行命令的目录,执行前将子进程的当前的目录修改为cwd. 默认值是None, 表示使用父进程的当前目录;
    env 新进程的环境变量字典;
    preexec_fn 指定刚好在执行命令之前,子进程中要调用的函数. 此函数不带任何参数;
    stderr 这个文件对象代表stderr在子进程中使用的文件. 可能是通过open()函数创建的文件对象, 整数的文件描述符, 或者特殊值
    PIPE,它表示应该创建一条新的管道. 默认值是None;
    stdin;
    stdout;

call(args, **parms)  此函数与Popen()函数完全相同, 但它之后简单执行命令然后返回它的状态代码

p.communicate([input]) 通过将input中提供的数据发送给进程的标准输入,与子进程进行通信. 数据一旦发出, 方法就会等待进程终
    止,同时收集标准输出上接收到的输出和标准错误. 返回值是一个元组(stdout, stderr)

p.kill() 终止子进程
p.terminate() 终止子进程
p.poll() 检查p是否已经终止
p.send_singal(signal) 发送一个信号给子进程, signal是signal模块中定义的信号编号
p.wait() 等待p终止,然后返回代码
p.pid 子进程的进程ID
p.returncode 进程的数字返回代码. 如果是None,表示进程尚未终止. 如果是负值,代表进程已经被一个信号所终止
"""