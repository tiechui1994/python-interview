"""
文件操作
"""
import os
import random

"""
文件模式:
    'r' 表示读取, 打开文件时, 指针指向头部
    'w' 表示写入, 打开文件时, 指针指向头部, 其长度会被截断为0
    'a' 表示追加, 打开文件时, 指针指向末尾
    说明: 'r', 'w', 'a' 是三种独立的文件模式,不可以组合使用

    't' 表示文本模式,默认模式
    如果以上的文件模式是采用文本模式打开文件,可以隐式地对换行'\n'执行转换. 例如,在Windows当中, 写入
    '\n'实际上会输出2字符序列'\r\n'(并且读取该文件时, '\r\n'又会被转换为一个'\n'字符串).

    'b' 表示二进制模式
    如果以上的文件模式采用二进制模式打开文件, 需要将'b'追加到文件模式的后面. 这将禁止换行符转换.

    '+' 表示可以打开文件进行原地更新. 打开文件进行更新时, 可以同时执行输入和输出, 只要所有的输出操作在任何
    输入之前清除其数据即可. 如果使用了'w+'模式打开文件,其长度首先会被截断为0

    'U' 使用模式'U'或'rU'打开文件,将会提供通用的换行符支持, 方便阅读. 在由各种文件I/O函数返回的字符串中,
    该功能可将不同的换行符编码('\n', '\r', '\r\n')转换为标准'\n'字符,从而简化跨平台.
"""

file = os.path.split(__file__)[0] + '/file.text'


def write_context():
    with open(file, 'w') as fd:
        fd.write(''.join(random.sample('0123456789abcdefghijklmnopqrstuvwxyz', 30)))


def write_mode():
    with open(file, 'a+') as fd:
        print(fd.tell())


if __name__ == '__main__':
    write_context()
    write_mode()
